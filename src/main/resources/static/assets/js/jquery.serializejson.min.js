!function(e){var n; "function" == typeof define && define.amd?define(["jquery"], e):"object" == typeof exports?(n = require("jquery"), module.exports = e(n)):e(window.jQuery || window.Zepto || window.$)}(function(f){"use strict"; f.fn.serializeJSON = function(e){var r, t, s, a, i, u, l, o, p = f.serializeJSON, c = this, d = p.setupOpts(e), n = c.serializeArray(); return p.readCheckboxUncheckedValues(n, d, c), r = {}, f.each(n, function(e, n){t = n.name, s = n.value, i = p.extractTypeAndNameWithNoType(t), u = i.nameWithNoType, (l = i.type) || (l = p.attrFromInputWithName(c, t, "data-value-type")), p.validateType(t, l, d), "skip" !== l && (o = p.splitInputNameIntoKeysArray(u), a = p.parseValue(s, t, l, d), !a && p.shouldSkipFalsy(c, t, u, l, d) || p.deepSet(r, o, a, d))}), r}, f.serializeJSON = {defaultOptions:{checkboxUncheckedValue:void 0, parseNumbers:!1, parseBooleans:!1, parseNulls:!1, parseAll:!1, parseWithFunction:null, skipFalsyValuesForTypes:[], skipFalsyValuesForFields:[], customTypes:{}, defaultTypes:{string:function(e){return String(e)}, number:function(e){return Number(e)}, boolean:function(e){return - 1 === ["false", "null", "undefined", "", "0"].indexOf(e)}, null:function(e){return - 1 === ["false", "null", "undefined", "", "0"].indexOf(e)?e:null}, array:function(e){return JSON.parse(e)}, object:function(e){return JSON.parse(e)}, auto:function(e){return f.serializeJSON.parseValue(e, null, null, {parseNumbers:!0, parseBooleans:!0, parseNulls:!0})}, skip:null}, useIntKeysAsArrayIndex:!1}, setupOpts:function(n){var e, r, t, s, a, i = f.serializeJSON; for (e in null == n && (n = {}), t = i.defaultOptions || {}, r = ["checkboxUncheckedValue", "parseNumbers", "parseBooleans", "parseNulls", "parseAll", "parseWithFunction", "skipFalsyValuesForTypes", "skipFalsyValuesForFields", "customTypes", "defaultTypes", "useIntKeysAsArrayIndex"], n)if ( - 1 === r.indexOf(e))throw new Error("serializeJSON ERROR: invalid option '" + e + "'. Please use one of " + r.join(", ")); return a = (s = function(e){return!1 !== n[e] && "" !== n[e] && (n[e] || t[e])})("parseAll"), {checkboxUncheckedValue:s("checkboxUncheckedValue"), parseNumbers:a || s("parseNumbers"), parseBooleans:a || s("parseBooleans"), parseNulls:a || s("parseNulls"), parseWithFunction:s("parseWithFunction"), skipFalsyValuesForTypes:s("skipFalsyValuesForTypes"), skipFalsyValuesForFields:s("skipFalsyValuesForFields"), typeFunctions:f.extend({}, s("defaultTypes"), s("customTypes")), useIntKeysAsArrayIndex:s("useIntKeysAsArrayIndex")}}, parseValue:function(e, n, r, t){var s = f.serializeJSON, a = e; return t.typeFunctions && r && t.typeFunctions[r]?a = t.typeFunctions[r](e):t.parseNumbers && s.isNumeric(e)?a = Number(e):!t.parseBooleans || "true" !== e && "false" !== e?t.parseNulls && "null" == e?a = null:t.typeFunctions && t.typeFunctions.string && (a = t.typeFunctions.string(e)):a = "true" === e, t.parseWithFunction && !r && (a = t.parseWithFunction(a, n)), a}, isObject:function(e){return e === Object(e)}, isUndefined:function(e){return void 0 === e}, isValidArrayIndex:function(e){return/^[0-9]+$/.test(String(e))}, isNumeric:function(e){return 0 <= e - parseFloat(e)}, optionKeys:function(e){if (Object.keys)return Object.keys(e); var n, r = []; for (n in e)r.push(n); return r}, readCheckboxUncheckedValues:function(r, t, e){var n, s, a; null == t && (t = {}), f.serializeJSON, n = "input[type=checkbox][name]:not(:checked):not([disabled])", e.find(n).add(e.filter(n)).each(function(e, n){if (s = f(n), null == (a = s.attr("data-unchecked-value")) && (a = t.checkboxUncheckedValue), null != a){if (n.name && - 1 !== n.name.indexOf("[]["))throw new Error("serializeJSON ERROR: checkbox unchecked values are not supported on nested arrays of objects like '" + n.name + "'. See https://github.com/marioizquierdo/jquery.serializeJSON/issues/67"); r.push({name:n.name, value:a})}})}, extractTypeAndNameWithNoType:function(e){var n; return(n = e.match(/(.*):([^:]+)$/))?{nameWithNoType:n[1], type:n[2]}:{nameWithNoType:e, type:null}}, shouldSkipFalsy:function(e, n, r, t, s){var a = f.serializeJSON.attrFromInputWithName(e, n, "data-skip-falsy"); if (null != a)return"false" !== a; var i = s.skipFalsyValuesForFields; if (i && ( - 1 !== i.indexOf(r) || - 1 !== i.indexOf(n)))return!0; var u = s.skipFalsyValuesForTypes; return null == t && (t = "string"), !(!u || - 1 === u.indexOf(t))}, attrFromInputWithName:function(e, n, r){var t = '[name="' + n.replace(/(:|\.|\[|\]|\s)/g, "\\$1") + '"]'; return e.find(t).add(e.filter(t)).attr(r)}, validateType:function(e, n, r){var t = f.serializeJSON, s = t.optionKeys(r?r.typeFunctions:t.defaultOptions.defaultTypes); if (n && - 1 === s.indexOf(n))throw new Error("serializeJSON ERROR: Invalid type " + n + " found in input name '" + e + "', please use one of " + s.join(", ")); return!0}, splitInputNameIntoKeysArray:function(e){var n; return f.serializeJSON, n = e.split("["), "" === (n = f.map(n, function(e){return e.replace(/\]/g, "")}))[0] && n.shift(), n}, deepSet:function(e, n, r, t){var s, a, i, u, l, o; if (null == t && (t = {}), (o = f.serializeJSON).isUndefined(e))throw new Error("ArgumentError: param 'o' expected to be an object or array, found undefined"); if (!n || 0 === n.length)throw new Error("ArgumentError: param 'keys' expected to be an array with least one element"); s = n[0], 1 === n.length?"" === s?e.push(r):e[s] = r:(a = n[1], "" === s && (l = e[u = e.length - 1], s = o.isObject(l) && (o.isUndefined(l[a]) || 2 < n.length)?u:1 + u), "" === a || t.useIntKeysAsArrayIndex && o.isValidArrayIndex(a)?!o.isUndefined(e[s]) && f.isArray(e[s]) || (e[s] = []):!o.isUndefined(e[s]) && o.isObject(e[s]) || (e[s] = {}), i = n.slice(1), o.deepSet(e[s], i, r, t))}}});